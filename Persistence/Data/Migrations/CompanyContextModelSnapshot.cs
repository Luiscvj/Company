// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(CompanyContext))]
    partial class CompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Core.Entities.Departament", b =>
                {
                    b.Property<string>("Dept_NoId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4)
                        .HasColumnType("char");

                    b.Property<string>("Dept_Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Dept_NoId");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Dept_Emp", b =>
                {
                    b.Property<string>("DepartamentId")
                        .HasColumnType("char(4)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("To_Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DepartamentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("dept_emp", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Dept_Manager", b =>
                {
                    b.Property<string>("DepartmentId")
                        .HasColumnType("char(4)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("From_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("To_Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DepartmentId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("detp_manager", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Property<int>("Emp_NoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("First_Name")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("Hire_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Last_Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.HasKey("Emp_NoId");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("varchar(90)");

                    b.HasKey("RoleId");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Salary", b =>
                {
                    b.Property<DateTime>("From_DateId")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Emp_NoId")
                        .HasColumnType("int");

                    b.Property<int>("Emp_Salary")
                        .HasMaxLength(11)
                        .HasColumnType("int");

                    b.Property<DateTime>("To_Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("From_DateId");

                    b.HasIndex("Emp_NoId");

                    b.ToTable("salary", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Title", b =>
                {
                    b.Property<string>("Title_Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("From_Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Emp_NoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("To_Date")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Title_Id", "From_Date");

                    b.HasIndex("Emp_NoId");

                    b.ToTable("title", (string)null);
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.HasIndex("Email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Core.Entities.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Core.Entities.Dept_Emp", b =>
                {
                    b.HasOne("Core.Entities.Departament", "Departament")
                        .WithMany("Dept_Emps")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithMany("Dept_Emps")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departament");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.Dept_Manager", b =>
                {
                    b.HasOne("Core.Entities.Departament", "Department")
                        .WithMany("Dept_Managers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithMany("Dept_Managers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.Salary", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithMany("Salaries")
                        .HasForeignKey("Emp_NoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.Title", b =>
                {
                    b.HasOne("Core.Entities.Employee", "Employee")
                        .WithMany("Titles")
                        .HasForeignKey("Emp_NoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Entities.UserRoles", b =>
                {
                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Departament", b =>
                {
                    b.Navigation("Dept_Emps");

                    b.Navigation("Dept_Managers");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Navigation("Dept_Emps");

                    b.Navigation("Dept_Managers");

                    b.Navigation("Salaries");

                    b.Navigation("Titles");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
